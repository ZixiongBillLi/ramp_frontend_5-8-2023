{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SNwfox9\\\\Desktop\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { TransactionPane } from \"./components/Transactions/TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll();\n    console.log(paginatedTransactions);\n    setIsLoading(false);\n  }, [paginatedTransactions, paginatedTransactionsUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadAllEmployees = useCallback(async () => {\n    setIsLoading(true);\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllEmployees();\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllEmployees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === \"\") {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [transactions !== null && transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n          transaction: transaction,\n          loading: isLoading // setTransactionApproval={function (params: { transactionId: string; newValue: boolean }): Promise<void> {\n          // } }\n\n        }, transaction.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)), transactions !== null && paginatedTransactions !== null && paginatedTransactions.nextPage !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ru3kLuLoFXRVwtlF7QfD7KxwHlg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","TransactionPane","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","fetchAll","console","log","loadTransactionsByEmployee","employeeId","invalidateData","fetchById","loadAllEmployees","loading","item","value","id","label","firstName","lastName","newValue","map","transaction","nextPage"],"sources":["C:/Users/SNwfox9/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport { TransactionPane } from \"./components/Transactions/TransactionPane\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll()\n    console.log(paginatedTransactions)\n\n    setIsLoading(false)\n  }, [paginatedTransactions, paginatedTransactionsUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  const loadAllEmployees = useCallback(async () => {\n    setIsLoading(true)\n    await employeeUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllEmployees()\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllEmployees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if(newValue.id===\"\"){\n              await loadAllTransactions()\n            }\n            else{await loadTransactionsByEmployee(newValue.id)}\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n        {transactions !== null &&\n            transactions.map((transaction) => (\n              <TransactionPane\n                key={transaction.id}\n                transaction={transaction}\n                loading={isLoading} \n                // setTransactionApproval={function (params: { transactionId: string; newValue: boolean }): Promise<void> {\n                  \n                // } }\n                />\n            ))}\n\n          {transactions !== null && (paginatedTransactions!==null && paginatedTransactions.nextPage!==null) &&(\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}